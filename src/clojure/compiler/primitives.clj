(ns clojure.compiler.primitives
  (:import [clojure.asm Type])
  (:import [clojure.asm.commons GeneratorAdapter Method]))

(def boolean-type (Type/getType Boolean))
(def char-type (Type/getType Character))
(def integer-type (Type/getType Integer))
(def long-type (Type/getType Long))
(def float-type (Type/getType Float))
(def double-type (Type/getType Double))
(def short-type (Type/getType Short))
(def byte-type (Type/getType Byte))
(def number-type (Type/getType Number))

(def char-value-method (Method/getMethod "char charValue()"))
(def boolean-value-method (Method/getMethod "boolean booleanValue()"))
(def char-value-of-method (Method/getMethod "Character valueOf(char)"))
(def int-value-of-method (Method/getMethod "Integer valueOf(int)"))
(def long-value-of-method (Method/getMethod "Long valueOf(long)"))
(def float-value-of-method (Method/getMethod "Float valueOf(float)"))
(def double-value-of-method (Method/getMethod "Double valueOf(double)"))
(def short-value-of-method (Method/getMethod "Short valueOf(short)"))
(def byte-value-of-method (Method/getMethod "Byte valueOf(byte)"))

(def int-value-method (Method/getMethod "int intValue()"))
(def long-value-method (Method/getMethod "long longValue()"))
(def float-value-method (Method/getMethod "float floatValue()"))
(def double-value-method (Method/getMethod "double doubleValue()"))
(def byte-value-method (Method/getMethod "byte byteValue()"))
(def short-value-method (Method/getMethod "short shortValue()"))

(def from-int-method (Method/getMethod "clojure.lang.Num from(int)"))
(def from-long-method (Method/getMethod "clojure.lang.Num from(long)"))
(def from-double-method (Method/getMethod "clojure.lang.Num from(double)"))

(def int-array-class (class (int-array 0)))
(def long-array-class (class (long-array 0)))
(def float-array-class (class (float-array 0)))
(def double-array-class (class (double-array 0)))
(def char-array-class (class (char-array 0)))
(def short-array-class (class (short-array 0)))
(def byte-array-class (class (byte-array 0)))
(def boolean-array-class (class (boolean-array 0)))

(def object-array-class (class (make-array Object 0)))